{
	"Init environment": {
		"prefix": [
			"initEnvironment"
		],
		"body": [
			"import numpy as np\nimport pandas as pd\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\""
		]
	},
	"Import array from list": {
		"prefix": [
			"jupyter_createArray_fromList"
		],
		"body": [
			"np.array(${1:list_to_convert})"
		]
	},
	"Create Continuous Array": {
		"prefix": [
			"jupyter_createArray_continuous"
		],
		"body": [
			"np.arange(${1:start}, ${2:stop}, ${3:step})"
		]
	},
	"Create Zero Array": {
		"prefix": [
			"jupyter_createArray_zero"
		],
		"body": [
			"np.zeros(${1:number_elements})"
		]
	},
	"Create One Array": {
		"prefix": [
			"jupyter_createArray_one"
		],
		"body": [
			"np.ones(${1:number_elements})"
		]
	},
	"Create Array with Same Number": {
		"prefix": [
			"jupyter_createArray_same"
		],
		"body": [
			"np.full(${1:number_elements}, ${2:value})"
		]
	},
	"Create Equally spaced array": {
		"prefix": [
			"jupyter_createArray_linspace"
		],
		"body": [
			"np.linspace(${1:start}, ${2:end}, ${3:number_elements})"
		]
	},
	"Create Determinant array": {
		"prefix": [
			"jupyter_createArray_eye"
		],
		"body": [
			"np.eye(${1:size})"
		]
	},
	"Create random array from 0 to 1": {
		"prefix": [
			"jupyter_createArray_random10"
		],
		"body": [
			"np.random.rand(${1:size})"
		]
	},
	"Create Random array with Standard Normal Distribution": {
		"prefix": [
			"jupyter_createArray_randomDistribution"
		],
		"body": [
			"np.random.randn(${1:size})"
		]
	},
	"Create random array from a to b": {
		"prefix": [
			"jupyter_createArray_randomAToB"
		],
		"body": [
			"np.random.randint(${1:start}, ${2:end}, ${3:size})"
		]
	},
	"Change Array Size to axb": {
		"prefix": [
			"jupyter_changeSize"
		],
		"body": [
			"${1:array}.reshape(${1:row}, ${2:column})"
		]
	},
	"Check Array Size": {
		"prefix": [
			"jupyter_checkSize"
		],
		"body": [
			"${1:array}.shape"
		]
	},
	"Find Array Max": {
		"prefix": [
			"jupyter_ufunc_maxArray"
		],
		"body": [
			"${1:array}.max()"
		]
	},
	"Find Array Min": {
		"prefix": [
			"jupyter_ufunc_minArray"
		],
		"body": [
			"${1:array}.min()"
		]
	},
	"Find Array Max Position": {
		"prefix": [
			"jupyter_ufunc_maxPositionArray"
		],
		"body": [
			"${1:array}.argmax()"
		]
	},
	"Find Array Min Position": {
		"prefix": [
			"jupyter_ufunc_minPositionArray"
		],
		"body": [
			"${1:array}.argmin()"
		]
	},
	"Check type array": {
		"prefix": [
			"jupyter_ufunc_checkType"
		],
		"body": [
			"${1:array}.dtype"
		]
	},
	"Sum array by axis": {
		"prefix": [
			"jupyter_ufunc_sumAxis"
		],
		"body": [
			"${1:array}.sum(axis=${2:type})\n${3:#type 0 is column, type 1 is row}"
		]
	},
	"Create Series in pandas with value and key list": {
		"prefix": [
			"pandas_createSeriesWithList"
		],
		"body": [
			"pd.Series(${2:Value List}, ${1:Key List})"
		]
	},
	"Create Series in pandas with dict": {
		"prefix": [
			"pandas_createSeriesWithDict"
		],
		"body": [
			"pd.Series(${1:Dict})"
		]
	},
	"Create data frames in pandas with list": {
		"prefix": [
			"pandas_createDataFramewithList"
		],
		"body": [
			"pd.DataFrame(${1:Data}, ${2:Column name}, ${3:Row name})"
		]
	},
	"Get a block data in pandas": {
		"prefix": [
			"pandas_getBlockData"
		],
		"body": [
			"${1:Data Frame}.loc[[${2:Row list}], [${3:Column list}]]"
		]
	},
	"Delete row/column in pandas": {
		"prefix": [
			"pandas_delete"
		],
		"body": [
			"${1:Data Frame}.drop(${2:Column/row name}, axis=${3:1}, inplace=${4:True})\n${5:# axis: 1 là cột, 0 là hàng\n#inplace: True là xoá luôn, False là xoá tạm thời}"
		]
	},
	"Conditional in pandas": {
		"prefix": [
			"pandas_conditional"
		],
		"body": [
			"${1:Data Frame}[${2:Conditional}][${3:List column get}]"
		]
	},
	"Reset index": {
		"prefix": [
			"pandas_resetIndex"
		],
		"body": [
			"${1:Data Frame}.reset_index(inplace=${2:False})"
		]
	},
	"Set index in DataFrame": {
		"prefix": [
			"pandas_setIndex"
		],
		"body": [
			"${1:Data Frame}.set_index(${2:Column}, inplace=${3:False})"
		]
	},
	"Create DataFrame have group": {
		"prefix": [
			"pandas_createDataFramehaveGroup"
		],
		"body": [
			"${1:dataSource} = ${2:Data Source Define}\n${3:outsideLevelRow} = ${4:List Outside row (Ex: ['a', 'a', 'b', 'b'])}\n${5:insideLevelRow} = ${6:List Inside row (Ex: ['a1', 'a2', 'b1', 'b2'])}\n${7:column_index} = ${8:Column Index (normal)}\npd.DataFrame(${1:dataSource},  pd.MultiIndex.from_tuples(list(zip(${3:outsideLevelRow}, ${5:insideLevelRow}))), ${7:column_index})"
		]
	},
	"Set name for layer in group": {
		"prefix": [
			"pandas_setNameLayerGroup"
		],
		"body": [
			"{1:Data Frame}.index.names = ${2:List group}"
		]
	},
	"Get data by xs": {
		"prefix": [
			"pandas_getDataByXS"
		],
		"body": [
			"${1:Data Frame}.xs(${2:Name to get}, level=${3:index or name layer}, drop_level=${4:True})\n#${5:drop_level là true thì hiển thị cột lọc, false là không}"
		]
	},
	"Check data has nan": {
		"prefix": [
			"pandas_checkNullData"
		],
		"body": [
			"${1:Data Frame}.dropna(axis=${2:column or row}) ${3:#0 is row, 1 is column}"
		]
	},
	"Check data row/column has at least not null": {
		"prefix": [
			"pandas_checkNullDataAtLeast"
		],
		"body": [
			"${1:Data Frame}.dropna(axis=${2:column or row}, thresh=${3:Many at least do to you want to filter}) ${4:#0 is row, 1 is column\n#thresh: Ví dụ cần dòng hàng đó có 2 số có nghĩa, gõ số 2}"
		]
	},
	"Fill nan data": {
		"prefix": [
			"pandas_fillNanData"
		],
		"body": [
			"${1:Data Frame}.fillna(value=${2:Value to fill})"
		]
	},
	"Group by DataFrame and do something": {
		"prefix": [
			"pandas_groupBy"
		],
		"body": [
			"${1:Data Frame}.groupby(${2:Key to group}).${3:sum()}"
		]
	},
	"Describe column": {
		"prefix": [
			"pandas_describeColumn"
		],
		"body": [
			"${1:Data Frame}.groupby(${2:Key to group}).describe()${3:.transpose()}"
		]
	},
	"Filter Unique": {
		"prefix": [
			"pandas_filterUnique"
		],
		"body": [
			"${1:Data Frame}[${2:Column to filter}].unique()"
		]
	},
	"Count Unique": {
		"prefix": [
			"pandas_countUnique"
		],
		"body": [
			"${1:Data Frame}[${2:Column to count}].nunique()"
		]
	},
	"Count each value": {
		"prefix": [
			"pandas_countValue"
		],
		"body": [
			"${1:Data Frame}[${2:Column to filter}].value_counts()"
		]
	},
	"Apply function": {
		"prefix": [
			"pandas_applyFunc"
		],
		"body": [
			"${1:Data Frame}[${2:Column to apply}].apply(${3:Function})"
		]
	},
	"Sort column": {
		"prefix": [
			"pandas_sortColumn"
		],
		"body": [
			"${1:Data Frame}.sort_values(${2:Column name})"
		]
	},
	"Pivot table": {
		"prefix": [
			"pandas_sortColumn"
		],
		"body": [
			"${1:Data Frame}.pivot_table(values=${2:Data}, index=${3:Column})"
		]
	}
}