{
	"Init environment": {
		"prefix": [
			"initEnvironment"
		],
		"body": [
			"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n${1:from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"}\n%matplotlib inline"
		]
	},
	"Import array from list": {
		"prefix": [
			"numpy_createArray_fromList"
		],
		"body": [
			"np.array(${1:list_to_convert})"
		]
	},
	"Create Continuous Array": {
		"prefix": [
			"numpy_createArray_continuous"
		],
		"body": [
			"np.arange(${1:start}, ${2:stop}, ${3:step})"
		]
	},
	"Create Zero Array": {
		"prefix": [
			"numpy_createArray_zero"
		],
		"body": [
			"np.zeros(${1:number_elements})"
		]
	},
	"Create One Array": {
		"prefix": [
			"numpy_createArray_one"
		],
		"body": [
			"np.ones(${1:number_elements})"
		]
	},
	"Create Array with Same Number": {
		"prefix": [
			"numpy_createArray_same"
		],
		"body": [
			"np.full(${1:number_elements}, ${2:value})"
		]
	},
	"Create Equally spaced array": {
		"prefix": [
			"numpy_createArray_linspace"
		],
		"body": [
			"np.linspace(${1:start}, ${2:end}, ${3:number_elements})"
		]
	},
	"Create Determinant array": {
		"prefix": [
			"numpy_createArray_eye"
		],
		"body": [
			"np.eye(${1:size})"
		]
	},
	"Create random array from 0 to 1": {
		"prefix": [
			"numpy_createArray_random10"
		],
		"body": [
			"np.random.rand(${1:size})"
		]
	},
	"Create Random array with Standard Normal Distribution": {
		"prefix": [
			"numpy_createArray_randomDistribution"
		],
		"body": [
			"np.random.randn(${1:size})"
		]
	},
	"Create random array from a to b": {
		"prefix": [
			"numpy_createArray_randomAToB"
		],
		"body": [
			"np.random.randint(${1:start}, ${2:end}, ${3:size})"
		]
	},
	"Change Array Size to axb": {
		"prefix": [
			"numpy_changeSize"
		],
		"body": [
			"${1:array}.reshape(${1:row}, ${2:column})"
		]
	},
	"Check Array Size": {
		"prefix": [
			"numpy_checkSize"
		],
		"body": [
			"${1:array}.shape"
		]
	},
	"Find Array Max": {
		"prefix": [
			"numpy_ufunc_maxArray"
		],
		"body": [
			"${1:array}.max()"
		]
	},
	"Find Array Min": {
		"prefix": [
			"numpy_ufunc_minArray"
		],
		"body": [
			"${1:array}.min()"
		]
	},
	"Find Array Max Position": {
		"prefix": [
			"numpy_ufunc_maxPositionArray"
		],
		"body": [
			"${1:array}.argmax()"
		]
	},
	"Find Array Min Position": {
		"prefix": [
			"numpy_ufunc_minPositionArray"
		],
		"body": [
			"${1:array}.argmin()"
		]
	},
	"Check type array": {
		"prefix": [
			"numpy_ufunc_checkType"
		],
		"body": [
			"${1:array}.dtype"
		]
	},
	"Sum array by axis": {
		"prefix": [
			"numpy_ufunc_sumAxis"
		],
		"body": [
			"${1:array}.sum(axis=${2:type})\n${3:#type 0 is column, type 1 is row}"
		]
	},
	"Create Series in pandas with value and key list": {
		"prefix": [
			"pandas_createSeriesWithList"
		],
		"body": [
			"pd.Series(${2:Value List}, ${1:Key List})"
		]
	},
	"Create Series in pandas with dict": {
		"prefix": [
			"pandas_createSeriesWithDict"
		],
		"body": [
			"pd.Series(${1:Dict})"
		]
	},
	"Create data frames in pandas with list": {
		"prefix": [
			"pandas_createDataFramewithList"
		],
		"body": [
			"pd.DataFrame(${1:Data}, ${2:Column name}, ${3:Row name})"
		]
	},
	"Get a block data in pandas": {
		"prefix": [
			"pandas_getBlockData"
		],
		"body": [
			"${1:Data Frame}.loc[[${2:Row list}], [${3:Column list}]]"
		]
	},
	"Delete row/column in pandas": {
		"prefix": [
			"pandas_delete"
		],
		"body": [
			"${1:Data Frame}.drop(${2:Column/row name}, axis=${3:1}, inplace=${4:True})\n${5:# axis: 1 là cột, 0 là hàng\n#inplace: True là xoá luôn, False là xoá tạm thời}"
		]
	},
	"Conditional in pandas": {
		"prefix": [
			"pandas_conditional"
		],
		"body": [
			"${1:Data Frame}[${2:Conditional}][${3:List column get}]"
		]
	},
	"Reset index": {
		"prefix": [
			"pandas_resetIndex"
		],
		"body": [
			"${1:Data Frame}.reset_index(inplace=${2:False})"
		]
	},
	"Set index in DataFrame": {
		"prefix": [
			"pandas_setIndex"
		],
		"body": [
			"${1:Data Frame}.set_index(${2:Column}, inplace=${3:False})"
		]
	},
	"Create DataFrame have group": {
		"prefix": [
			"pandas_createDataFramehaveGroup"
		],
		"body": [
			"${1:dataSource} = ${2:Data Source Define}\n${3:outsideLevelRow} = ${4:List Outside row (Ex: ['a', 'a', 'b', 'b'])}\n${5:insideLevelRow} = ${6:List Inside row (Ex: ['a1', 'a2', 'b1', 'b2'])}\n${7:column_index} = ${8:Column Index (normal)}\npd.DataFrame(${1:dataSource},  pd.MultiIndex.from_tuples(list(zip(${3:outsideLevelRow}, ${5:insideLevelRow}))), ${7:column_index})"
		]
	},
	"Set name for layer in group": {
		"prefix": [
			"pandas_setNameLayerGroup"
		],
		"body": [
			"{1:Data Frame}.index.names = ${2:List group}"
		]
	},
	"Get data by xs": {
		"prefix": [
			"pandas_getDataByXS"
		],
		"body": [
			"${1:Data Frame}.xs(${2:Name to get}, level=${3:index or name layer}, drop_level=${4:True})\n#${5:drop_level là true thì hiển thị cột lọc, false là không}"
		]
	},
	"Check data has nan": {
		"prefix": [
			"pandas_checkNullData"
		],
		"body": [
			"${1:Data Frame}.dropna(axis=${2:column or row}) ${3:#0 is row, 1 is column}"
		]
	},
	"Check data row/column has at least not null": {
		"prefix": [
			"pandas_checkNullDataAtLeast"
		],
		"body": [
			"${1:Data Frame}.dropna(axis=${2:column or row}, thresh=${3:Many at least do to you want to filter}) ${4:#0 is row, 1 is column\n#thresh: Ví dụ cần dòng hàng đó có 2 số có nghĩa, gõ số 2}"
		]
	},
	"Fill nan data": {
		"prefix": [
			"pandas_fillNanData"
		],
		"body": [
			"${1:Data Frame}.fillna(value=${2:Value to fill})"
		]
	},
	"Group by DataFrame and do something": {
		"prefix": [
			"pandas_groupBy"
		],
		"body": [
			"${1:Data Frame}.groupby(${2:Key to group}).${3:sum()}"
		]
	},
	"Describe column": {
		"prefix": [
			"pandas_describeColumn"
		],
		"body": [
			"${1:Data Frame}.groupby(${2:Key to group}).describe()${3:.transpose()}"
		]
	},
	"Filter Unique": {
		"prefix": [
			"pandas_filterUnique"
		],
		"body": [
			"${1:Data Frame}[${2:Column to filter}].unique()"
		]
	},
	"Count Unique": {
		"prefix": [
			"pandas_countUnique"
		],
		"body": [
			"${1:Data Frame}[${2:Column to count}].nunique()"
		]
	},
	"Count each value": {
		"prefix": [
			"pandas_countValue"
		],
		"body": [
			"${1:Data Frame}[${2:Column to filter}].value_counts()"
		]
	},
	"Apply function": {
		"prefix": [
			"pandas_applyFunc"
		],
		"body": [
			"${1:Data Frame}[${2:Column to apply}].apply(${3:Function})"
		]
	},
	"Sort column": {
		"prefix": [
			"pandas_sortColumn"
		],
		"body": [
			"${1:Data Frame}.sort_values(${2:Column name})"
		]
	},
	"Pivot table": {
		"prefix": [
			"pandas_sortColumn"
		],
		"body": [
			"${1:Data Frame}.pivot_table(values=${2:Data}, index=${3:Column})"
		]
	},
	"Read CSV file": {
		"prefix": [
			"pandas_readCSV"
		],
		"body": [
			"pd.read_csv(${1:name of CSV file})"
		]
	},
	"Write to CSV file": {
		"prefix": [
			"pandas_writeCSV"
		],
		"body": [
			"${1:Data Frame}.to_csv(${2:name of CSV file}, index=${3:False}) ${4:True if you want to write index}"
		]
	},
	"Read Excel file": {
		"prefix": [
			"pandas_readExcel"
		],
		"body": [
			"pd.read_excel(${1:name of Excel file}, sheet_name=${2:Sheet to get data})"
		]
	},
	"Write Excel file": {
		"prefix": [
			"pandas_writeExcel"
		],
		"body": [
			"${1:Data Frame}.to_excel(${2:name of Excel file}, index=${3:False}, sheet_name=${4:Name of sheet result}) ${5:True if you want to write index}"
		]
	},
	"Read all table in link": {
		"prefix": [
			"pandas_readHTML"
		],
		"body": [
			"pd.read_html(${2:link})"
		]
	},
	"Create chart in maplotlib": {
		"prefix": [
			"maplotlib_createChart"
		],
		"body": [
			"${21:# Init chart}\nfig = plt.figure(figsize=(${1:Dài},${2:Cao}), dpi=${3:DPI})\n${4:#DPI: 100 dùng để xem, 300 dùng trong trình chiếu và in ấn}\nax = fig.add_axes([${5:Start left},${6:Start bottom},${7:Dài},${8:Cao}])\n\n${21:#Draw chart}\nax.plot(${9:x}, ${10:y}, label=${11:label}, color=${12:color}, alpha=${13:Độ mờ})\n\n${21:# Custom chart}\nax.set_title(${14:Title Chart});\nax.set_xlabel(${15:X axis label})\nax.set_ylabel(${16:Y axis label});\nax.set_xlim([${17:x start}, ${18:x end}])\nax.set_ylim([${19:y start}, ${20:y end}])\nax.legend(loc=0)"
		]
	},
	"Vẽ historical plot có cả cột + đường": {
		"prefix": [
			"maplotlib_historicalFull"
		],
		"body": [
			"sns.histplot(${1:Data Column}, bins=${2:Number of division}, kde=True)"
		]
	},
	"Vẽ column chart": {
		"prefix": [
			"maplotlib_columnChart"
		],
		"body": [
			"sns.histplot(${1:Data Column}, bins=${2:Number of division}, kde=False)"
		]
	},
	"Vẽ historical plot chỉ có đường": {
		"prefix": [
			"maplotlib_historicalColumn"
		],
		"body": [
			"sns.kdeplot(${1:Data Column})"
		]
	},
	"Vẽ biểu đồ KDE": {
		"prefix": [
			"maplotlib_KDE"
		],
		"body": [
			"sns.kdeplot(${1:Data Column})\nsns.rugplot(${1:Data Column})"
		]
	},
	"Vẽ biểu đồ Scatter": {
		"prefix": [
			"maplotlib_scatter"
		],
		"body": [
			"sns.jointplot(x=${1:Column 1},y=${2:Column 2},data=${3: Data List},kind=${4: type})${5: scatter là chỉ điểm thuần, reg là thêm đường thẳng linear expression}"
		]
	},
	"Vẽ biểu đồ tương quan giữa các đối tượng": {
		"prefix": [
			"maplotlib_joinPlot"
		],
		"body": [
			"sns.jointplot(${1: Data List},hue=${2: Column to center})"
		]
	},
	"Vẽ biểu đồ heatmap": {
		"prefix": [
			"maplotlib_heatmap"
		],
		"body": [
			"sns.heatmap(${1: Data Full},cmap='coolwarm',${2: annot=True},linewidths=1)"
		]
	},
	"Vẽ biểu đồ cột": {
		"prefix": [
			"maplotlib_column"
		],
		"body": [
			"sns.barplot(x=${1: Column 1},y=${2: Column 2},data=${3: Table},estimator=${4: Function})"
		]
	},
	"Vẽ biểu đồ cột đếm": {
		"prefix": [
			"maplotlib_countColumn"
		],
		"body": [
			"sns.countplot(x=${1: Column}, data=${2: Table})"
		]
	},
	"Vẽ biểu đồ boxplot": {
		"prefix": [
			"maplotlib_boxplot"
		],
		"body": [
			"sns.boxplot(x=${1: Column 1}, y=${2: Column 2}, data=${3: Table}, palette='rainbow')"
		]
	},
	"Vẽ biểu đồ tuỳ chỉnh grid": {
		"prefix": [
			"maplotlib_gridCustom"
		],
		"body": [
			"${1: g} = sns.FacetGrid(${2: Table}, col=${3: Column}, row=${4: Row})\n${1: g} = ${1: g}.map(plt.scatter, ${5: Data x}, ${6: Data Y})"
		]
	},
	"Import dataset and split X and Y dataset": {
		"prefix": [
			"ML_Pre_Step1ImportandXY"
		],
		"body": [
			"import pandas as pd
dataset = pd.read_csv(${1:Data file name})
X = dataset.iloc[:, :-1].values #dataset.drop('', axis=1)
y = dataset.iloc[:, -1].values #dataset['']"
		]
	},
	"Fill missing value": {
		"prefix": [
			"ML_Pre_Step2MissingValue"
		],
		"body": [
			"import numpy as np
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=${1:np.nan}, strategy=${2:'mean'})
imputer.fit(X[:, ${3:1:3}])
X[:, ${3:1:3}] = imputer.transform(X[:, ${3:1:3}])"
		]
	},
	"Convert string more two options": {
		"prefix": [
			"ML_Pre_Step3ConvertMore2Options"
		],
		"body": [
			"from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
categorical_features = [${1:List column to convert}]
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), categorical_features)], remainder='passthrough')
${2:X} = np.array(ct.fit_transform(${2:X}))"
		]
	},
	"Convert string only two options": {
		"prefix": [
			"ML_Pre_Step3ConvertMore2Options"
		],
		"body": [
			"from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(${1:Column to convert})"
		]
	},
	"Split Train and Test dataset": {
		"prefix": [
			"ML_Pre_Step4SplitTrainandTest"
		],
		"body": [
			"from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)"
		]
	},
	"Feature Scaling": {
		"prefix": [
			"ML_Pre_Step5Scaling"
		],
		"body": [
			"from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)"
		]
	},
	"Create simple linear model and apply for the test": {
		"prefix": [
			"ML_SimLine_Create"
		],
		"body": [
			"# create simple linear model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)
# apply for the test
y = regressor.predict(X_test)"
		]
	}, 
	"Draw simple line to test": {
		"prefix": [
			"ML_SimLine_Test"
		],
		"body": [
			"import matplotlib.pyplot as plt
plt.scatter(X_test, y_test, color = 'red')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.xlabel(${1:'X (input)'})
plt.ylabel(${2:'Y (output - result)'})"
		]
	}
	"Get simple line function": {
		"prefix": [
			"ML_SimLine_GetFunction"
		],
		"body": [
			"coefficients = regressor.coef_
intercept = regressor.intercept_
print("y =", intercept, "+", " + ".join([f"{coef} * x{i}" for i, coef in enumerate(coefficients)]))"
		]
	}
}
